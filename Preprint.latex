\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{amsmath,amssymb,amsthm,hyperref}
\usepackage{microtype}
\usepackage{cite}
\usepackage{geometry}
\geometry{margin=1in}

% Complexity classes and notation
\newcommand{\Pclass}{\mathrm{P}}
\newcommand{\NP}{\mathrm{NP}}
\newcommand{\Ppoly}{\mathrm{P}/\mathrm{poly}}
\newcommand{\AC}{\mathsf{AC}}
\newcommand{\GapMCSP}{\textsc{Gap-MCSP}}
\newcommand{\SearchMCSP}{\textsc{Search-MCSP}}

\title{pnp3 Blueprint: Switching, Shrinkage, and Anti-Checkers Toward $\Pclass \ne \NP$}
\author{Dmitry Khanukov\\\texttt{thelaprok@gmail.com}\\\emph{Preprint, work in progress}}
\date{September 2025}

\begin{document}

\maketitle

\begin{abstract}
This note records the current blueprint for the pnp3 project.  Our objective is to
combine switching-lemma technology, shrinkage bounds for formulas, and constructive
anti-checkers inside Lean in order to finish Part~C of the program separating
$\Pclass$ from $\NP$.  Earlier attempts (notably pnp2) were discarded after
counterexamples; the present document therefore restates the plan from scratch and
only tracks the components that are still viable.
\end{abstract}

\section{Roadmap Overview}
The magnification paradigm shows that modest lower bounds for sparse
$\NP$ languages can escalate to super-polynomial circuit lower bounds.
Oliveira--Pich--Santhanam~\cite{OPS19} and Oliveira--Santhanam~\cite{OS18}
proved that slightly super-linear circuit or formula bounds for
variants of Minimum Circuit Size Problem already imply
$\NP \not\subseteq \Ppoly$.  Chen--Jin--Williams~\cite{CJW22}
strengthened this viewpoint by showing that any sparse $\NP$ language
requiring $n^{1+\varepsilon}$-size circuits forces the same separation.
McKay--Murray--Williams~\cite{MMW19} extended the list of triggers via
the circuit-input game.  The pnp3 plan is to instantiate one of these
magnification theorems using the shrinkage and atlas infrastructure that
was formalized during Parts~A and~B.

Concretely, we target the following implication chain:
\begin{enumerate}
  \item construct a common partial decision tree for the restricted
    circuit model (formula or $\AC^0$ with bounded local gates);
  \item translate that object into a bounded atlas scenario and obtain
    quantitative capacity bounds using the SAL counting lemmas;
  \item apply a constructive anti-checker to contradict the existence of a
    circuit solving the chosen sparse $\NP$ problem within the stated
    size budget; and
  \item invoke a magnification theorem to conclude
    $\NP \not\subseteq \Ppoly$, hence $\Pclass \ne \NP$.
\end{enumerate}
Each step has a corresponding Lean component described below.

\section{Magnification Targets}
The OPS trigger~\cite{OPS19} states that if
$\GapMCSP$ on $N$-bit truth tables lacks circuits of size
$N^{1+\varepsilon}$ (for some fixed $\varepsilon>0$), then
$\NP \not\subseteq \Ppoly$.  Oliveira and Santhanam~\cite{OS18}
showed an analogous consequence for a search variant under formula
lower bounds.  Chen--Jin--Williams~\cite{CJW22} proved that the
phenomenon is universal for sparse $\NP$ languages: any such language
outside $\mathrm{Circuit}[n^{1+\varepsilon}]$ already separates
$\NP$ from $\Ppoly$.  The circuit-input trigger of McKay--Murray--Williams~\cite{MMW19}
will be used as a backup when oracle gates are present.

Within pnp3 we parameterize each candidate trigger by a record of the
allowed circuit depth, size exponent, and admissible oracle fan-in.  The
Lean structure \texttt{ScenarioBudget} (introduced in
\texttt{pnp3/LowerBounds/LB\_Formulas.lean}) captures these budgets.
This uniform encoding lets us swap between the OPS, CJW, and MMW
settings without altering the downstream counting arguments.

\section{Switching and Shrinkage Parameters}
The quantitative backbone of the blueprint comes from random
restrictions.  For $\AC^0$ circuits we rely on H\aa stad's switching
lemma~\cite{Hastad87}, its multi-switching refinement~\cite{Hastad14},
and the Impagliazzo--Matthews--Paturi analysis~\cite{IMP12} to operate
with density $p \approx 1/\log^{d-1}M$ while maintaining a decision-tree
budget $t = O(\log M)$.  Servedio and Tan's pseudorandom
restrictions~\cite{ServedioTan19} allow us to keep the same parameters in
constructive settings.  For formulas we use the shrinkage exponent
$2$~\cite{Hastad98}, which guarantees that a size-$s$ de Morgan formula
collapses to $O(sp^2)$ under a $p$-random restriction.  The Lean modules
in \texttt{ThirdPartyFacts} expose these parameters through
constructive shrinkage certificates and partial decision trees.

\section{Atlas and Capacity Infrastructure}
Given a shrinkage witness, we convert it to a bounded atlas scenario via
\texttt{scenarioFromAC0} or its formula counterpart.  The resulting
structure packages an atlas dictionary, a selector bound~$k$, an error
threshold~$\varepsilon$, and proofs that every function in the tracked
family is approximated by at most $k$ subcubes with total error at most
$\varepsilon$.  Section~4 of
\texttt{pnp3/LowerBounds/LB\_Formulas.lean} proves that any such
scenario bounds the cardinality of the family by the analytic capacity
function derived in Part~B.  When a set $Y$ of functions exceeds this
capacity, \texttt{no\_bounded\_atlas\_of\_large\_family} produces the
necessary contradiction.

To keep the quantitative data explicit, the \texttt{ScenarioBudget}
record stores:
\begin{itemize}
  \item the ambient dimension $n$ and the list of functions $F$;
  \item bounds on $k$, the dictionary length, and the residual error;
  \item inequalities linking these values to the switching/shrinkage
    parameters supplied by \texttt{ThirdPartyFacts}.
\end{itemize}
This packaging mirrors the textbook statements of the multi-switching
lemma while remaining amenable to calculation inside Lean.

\section{Anti-Checkers and the Final Contradiction}
Assuming, for contradiction, that $\NP \subseteq \Ppoly$, Oliveira et
al.~\cite{OSPR21} construct nearly linear-size circuits that output
anti-checkers: small sets of inputs that witness the failure of any
smaller circuit for a given function.  In the pnp3 plan the
anti-checker will be instantiated on the sparse $\NP$ language from the
chosen trigger (e.g.\ $\GapMCSP$ with a tight size promise).  The Lean
statement \texttt{antiChecker\_exists\_large\_Y} exports this
construction and guarantees that the produced family $Y$ overtakes the
capacity provided by the relevant \texttt{ScenarioBudget}.  To control
the parameter budgets we introduced \texttt{ApproxOnTestset} in
\texttt{Counting/Atlas\_to\_LB\_Core.lean}: the lemma
\texttt{approxOnTestset\_card\_le} shows that once all deviations are
restricted to a fixed test set $T$, the number of $R$-atlas candidates
collapses to $\mathrm{unionBound}(D,k)\cdot 2^{|T|}$.  The strengthened
interfaces \texttt{antiChecker\_exists\_testset} and
\texttt{antiChecker\_exists\_testset\_local} package this information
uniformly, exposing both the large family $Y$ and a polylogarithmic test
set $T$ that saturates the covering bounds.  The auxiliary lemma
\texttt{no\_bounded\_atlas\_on\_testset\_of\_large\_family} now turns the
SAL contradiction into a one-line application of these bounds, showing
that any candidate atlas fails on $Y$.  The final step is to plug the
obtained restricted-model lower bound into the appropriate magnification
theorem.

\section{Packaging the Magnification Hypotheses}
To communicate with the magnification triggers we introduced a compact
layer in \texttt{pnp3/Magnification/PipelineStatements.lean}.  The
definitions \texttt{AC0Statement} and \texttt{LocalStatement} encode the
absence of small $\AC^0$ and local-circuit solvers, while the lemmas
\texttt{formula\_hypothesis\_from\_pipeline} and
\texttt{local\_hypothesis\_from\_pipeline} translate the anti-checker
conclusion into the exact hypotheses demanded by OPS'19 and JACM'22.
Additional equalities such as
\texttt{formulaHypothesis\_eq\_general} and
\texttt{localHypothesis\_eq\_statement} record that these hypotheses are
definitionally the OPS conditions.

For downstream automation we bundled the entire Step~C output into
\texttt{PipelineBridgeKit}.  This structure stores the negations of
small solvers together with the ``for every positive parameter''
versions of the OPS and locality assumptions.  The same module now also
packages the Locality-Lift contradiction via\n\texttt{GeneralCircuitStatement} and exposes\n\texttt{general\_circuit\_hypothesis}, so the bridge layer can route
general-circuit lower bounds through OPS without re-proving the
reduction.  The bridge file can then fire the corresponding trigger via
single lemma calls (e.g.\n\texttt{bridge\_from\_pipeline\_kit\_formulas} for AC$^0$ and\n\texttt{bridge\_from\_pipeline\_kit\_general\_circuits} for unrestricted
circuits), and the final theorem\n\texttt{P\_ne\_NP\_final} instantiates the kit to recover the desired
separation in one line.

Finally, \texttt{pnp3/Magnification/LocalityLift.lean} records the new
``Locality-Lift'' interface: any purported small general circuit (with
parameters stored in \texttt{SmallGeneralCircuitSolver}) yields a small
test set and a local-circuit solver with polylogarithmic locality.  The
bridge \texttt{LB\_GeneralFromLocal.lean} applies
\texttt{locality\_lift} followed by \texttt{LB\_LocalCircuits\_core},
closing the loop from unrestricted circuits back to the existing local
lower bound.

To keep the shrinkage side compatible with locality we introduced
\texttt{pnp3/Core/ShrinkageAC0.lean}.  The new structure
\texttt{OraclePartialWitness} augments the existing partial certificates
with an explicit oracle fan-in bound and records that this fan-in remains
polylogarithmic.  On the magnification side the file
\texttt{Magnification/Facts\_Magnification.lean} now exposes the
\texttt{CJW\_sparse\_trigger}, covering the Chen--Jin--Williams sparse
language theorem alongside the OPS and locality triggers.  The bridge file
adds \texttt{P\_ne\_NP\_from\_sparse\_statement} together with the
packaging structure \texttt{SparseBridgeKit}, so any Lean proof of a
Chen--Jin--Williams style hypothesis immediately yields the classical
separation after composing with the standard inclusion \mbox{$P \subseteq
P/poly$}.  All numerical assumptions feeding these lemmas are summarised in
\texttt{pnp3/Docs/Parameters.md}.

\section{Next Steps}
The outstanding tasks for Part~C are now localised:
\begin{enumerate}
  \item Finalise the Lean formalisation of the anti-checker interface and
    connect it to \texttt{ApproxOnTestset} so that the test-set capacity
    contradiction can be invoked directly.
  \item Instantiate \texttt{ScenarioBudget} with the parameter tables for
    the OPS, CJW, and MMW triggers, confirming that the shrinkage
    witnesses deliver the required $(p,t,\varepsilon)$ trade-offs.
  \item Instantiate \texttt{PipelineBridgeKit} with the anti-checker
    outputs once the constructive proofs are in place, yielding concrete
    lemmas of the form ``if the OPS budget solver exists, then
    $\NP \not\subseteq \Ppoly$".
  \item Calibrate the parameters returned by
    \texttt{locality\_lift}: verify that the locality and size bounds are
    compatible with the shrinkage budgets used in Part~B so the general
    solver reduction meshes with the existing Lean infrastructure, and
    confirm that the exported\n    \texttt{general\_circuit\_hypothesis} indeed matches the OPS trigger.
  \item Document the interaction between the constructive switching
    lemmas and the anti-checker routine so that further improvements to
    the parameters can be slotted into the same pipeline.
\end{enumerate}
Completing these items will deliver the missing Part~C link and close
the pnp3 proof strategy.

\begin{thebibliography}{99}

\bibitem{Hastad87}
J.~H\aa stad.
\newblock \emph{Computational Limitations of Small-Depth Circuits}.
\newblock MIT Press, 1987.

\bibitem{Hastad98}
J.~H\aa stad.
\newblock The shrinkage exponent of de {M}organ formulas is~2.
\newblock \emph{SIAM Journal on Computing}, 27(1):48--64, 1998.

\bibitem{Hastad14}
J.~H\aa stad.
\newblock On the correlation of parity and small-depth circuits.
\newblock \emph{Journal of the ACM}, 61(1):1--10, 2014.

\bibitem{IMP12}
R.~Impagliazzo, W.~Matthews, and R.~Paturi.
\newblock A satisfiability algorithm for $\AC^0$.
\newblock In \emph{Proceedings of SODA~2012}, pages 541--557, 2012.

\bibitem{ServedioTan19}
R.~Servedio and L.-Y. Tan.
\newblock Improved pseudorandom generators from pseudorandom multi-switching
  lemmas.
\newblock \emph{Algorithmica}, 81(9):3869--3905, 2019.

\bibitem{OS18}
I.~C. Oliveira and R.~Santhanam.
\newblock Hardness magnification for meta-complexity.
\newblock In \emph{Proceedings of FOCS~2018}, pages 65--76, 2018.

\bibitem{OPS19}
I.~C. Oliveira, J.~Pich, and R.~Santhanam.
\newblock Hardness magnification near state-of-the-art lower bounds.
\newblock \emph{Theory of Computing}, 17(2):1--89, 2021.

\bibitem{OSPR21}
I.~C. Oliveira, R.~Santhanam, J.~Pich, and B.~Rossman.
\newblock Constructive anti-checkers and meta-complexity.
\newblock arXiv:2107.12000, 2021.

\bibitem{CJW22}
L.~Chen, C.~Jin, R.~Williams, I.~C. Oliveira, J.~Pich, Z.~Ren, and R.~Santhanam.
\newblock Beyond natural proofs: Hardness magnification and locality.
\newblock \emph{Journal of the ACM}, 69(4):1--74, 2022.

\bibitem{MMW19}
R.~McKay, C.~Murray, and R.~Williams.
\newblock Hardness magnification near state-of-the-art lower bounds.
\newblock In \emph{Proceedings of STOC~2019}, pages 902--913, 2019.

\bibitem{ChapmanWilliams15}
R.~Chapman and R.~Williams.
\newblock The circuit-input game: Finding backdoors to circuit {SAT}.
\newblock In \emph{Proceedings of ITCS~2015}, pages 45--60, 2015.

\bibitem{KabanetsCai99}
V.~Kabanets and J.-Y. Cai.
\newblock Circuit minimization problem.
\newblock Electronic Colloquium on Computational Complexity, TR99-045, 1999.

\bibitem{SaksSanthanam20}
M.~Saks and R.~Santhanam.
\newblock Circuit lower bounds from {NP}-hardness of {MCSP} under {T}uring
  reductions.
\newblock In \emph{Proceedings of CCC~2020}, pages 20:1--20:23, 2020.

\end{thebibliography}

\end{document}
