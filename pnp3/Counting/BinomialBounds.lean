import Mathlib.Data.Rat.Init

/-!
  pnp3/Counting/BinomialBounds.lean

  В этом файле мы фиксируем стандартные комбинаторные оценки,
  которые понадобятся при анализе ёмкости «атласов» (словари
  подкубов и их покрытия).  В текущей версии проекта мы не
  выводим эти факты строго внутри Lean, а оформляем их в виде
  аксиом с подробными комментариями.  Это позволяет построить
  логическую связку частей B и C, а при необходимости позже
  заменить аксиомы на доказанные леммы или импорт из mathlib.

  Конкретно нам нужны две оценки:

  * Верхняя граница на число различных объединений ≤ k подкубов
    из словаря размера D.  Комбинаторно это суммарная биномиальная
    сумма `∑_{i=0}^k C(D,i)`.
  * Оценка размера хаммингового шара вокруг функции g: число функций f,
    отличающихся от g не более чем на ε⋅|X| точек.

  Эти факты приводят к понятию "ёмкости" словаря, которая позже
  используется в части C для вывода нижних оценок.
-/

namespace Pnp3
namespace Counting

/--
  Бинарная энтропия `H(ε)` из аналитической оценки объёма хаммингового
  шара.  Пока мы используем её как чистый символ (возвращаем просто `ε`),
  важен лишь факт, что она присутствует в формуле.  Когда будет подключена
  строгая аналитика, определение можно заменить на настоящее выражение
  через логарифмы.
-/
@[reducible] def Hbin (ε : Rat) : Rat := ε

/--
  Суммарная верхняя оценка на число подмножеств словаря размера `D`,
  состоящих не более чем из `k` элементов.  Классический ответ — биномиальная
  сумма `∑_{i=0}^k C(D,i)`, для которой используется приблизительная
  оценка `(k+1) * (eD/k)^k`.  Здесь мы фиксируем лишь тот факт, что
  подобная конечная граница существует и зависит только от `(D,k)`.

  В дальнейшем (при развитии математической части проекта) эту аксиому
  планируется заменить на строго доказанную лемму.  Пока же важно иметь
  возможность ссылаться на существование такой оценки.
-/
axiom sum_binom_upper_eD_over_k (D k : Nat) : ∃ _Bound : Nat, True

/--
  Оценка размера хаммингового шара.  Для фиксированной функции `g` на
  пространстве `X` мощности `N` и параметра ошибки `ε ∈ [0, 1/2]` число
  функций `f`, отличающихся от `g` не более чем на `ε⋅N` позиций, не
  превышает `2^{H(ε) N}`.  Здесь мы оставляем только заявление о существовании
  соответствующей конечной границы `Bound`.
-/
axiom hamming_ball_entropy_bound
  (N : Nat) (ε : Rat) (h0 : (0 : Rat) ≤ ε) (h1 : ε ≤ (1 : Rat) / 2) :
  ∃ _Bound : Nat, True

/--
  Удобное обозначение для произведения двух верхних оценок: количества
  возможных объединений и размера хаммингового шара.  Это «ёмкость» словаря,
  которая будет использоваться в частях B и C.  Поскольку конкретные
  численные значения нас сейчас не волнуют, определение даёт абстрактную
  функцию.
-/
noncomputable def unionBound (D k : Nat) : Nat :=
  Classical.choose (sum_binom_upper_eD_over_k D k)

/-- Свойство, сопровождающее `unionBound`: это действительно корректная граница. -/
lemma unionBound_spec (D k : Nat) : True :=
  (Classical.choose_spec (sum_binom_upper_eD_over_k D k))

/--
  Абстрактная верхняя оценка на размер хаммингового шара.  Мы извлекаем
  её из аксиомы `hamming_ball_entropy_bound` при фиксированных параметрах.
-/
noncomputable def hammingBallBound
  (N : Nat) (ε : Rat) (h0 : (0 : Rat) ≤ ε) (h1 : ε ≤ (1 : Rat) / 2) : Nat :=
  Classical.choose (hamming_ball_entropy_bound N ε h0 h1)

/-- Свойство, сопровождающее `hammingBallBound`. -/
lemma hammingBallBound_spec
  (N : Nat) (ε : Rat) (h0 : (0 : Rat) ≤ ε) (h1 : ε ≤ (1 : Rat) / 2) : True :=
  (Classical.choose_spec (hamming_ball_entropy_bound N ε h0 h1))

/--
  Главная сводная величина — произведение двух оценок.  Именно она
  будет фигурировать в формулировках «Covering Power» и «Incompatibility».
  В дальнейшем, если появится потребность в более точном контроле, можно
  раскрыть это определение и подставить явные формулы.
-/
noncomputable def capacityBound
  (D k N : Nat) (ε : Rat)
  (h0 : (0 : Rat) ≤ ε) (h1 : ε ≤ (1 : Rat) / 2) : Nat :=
  unionBound D k * hammingBallBound N ε h0 h1

end Counting
end Pnp3
