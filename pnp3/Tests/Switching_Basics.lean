import Core.BooleanBasics
import Mathlib.Data.Fin.Basic

open Pnp3
open Core
open scoped Classical

namespace Pnp3.Tests

/-- –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç: CNF –∏–∑ –æ–¥–Ω–æ–π –∫–ª–∞—É–∑—ã `x‚ÇÄ = true`. -/
private def literal‚ÇÄ : Literal 2 :=
  { idx := ‚ü®0, by decide‚ü©, value := true }

private def clause‚ÇÄ : CnfClause 2 :=
  { literals := [literal‚ÇÄ],
    nodupIdx := by
      simpa using (List.nodup_singleton (literal‚ÇÄ.idx)) }

private def cnf‚ÇÄ : CNF 2 1 :=
  { clauses := [clause‚ÇÄ],
    width_le := by
      intro C hC
      rcases List.mem_singleton.mp hC with rfl
      simp [CnfClause.width, clause‚ÇÄ] }

/-- –î–≤–µ —Ç–æ—á–∫–∏ –Ω–∞ –∫—É–±–µ: —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å –∫–ª–∞—É–∑–æ–π. -/
private def xTrue : Core.BitVec 2 := fun i => Fin.cases true (fun _ => false) i
private def xFalse : Core.BitVec 2 := fun _ => false

@[simp] lemma clause‚ÇÄ_eval_true : clause‚ÇÄ.eval xTrue = true := by
  classical
  refine
    (CnfClause.eval_eq_true_iff (C := clause‚ÇÄ) (x := xTrue)).2 ?_
  refine ‚ü®literal‚ÇÄ, ?_, ?_‚ü©
  ¬∑ simp [clause‚ÇÄ]
  ¬∑ simp [Literal.holds, literal‚ÇÄ, xTrue, Fin.cases]

@[simp] lemma clause‚ÇÄ_eval_false : clause‚ÇÄ.eval xFalse = false := by
  classical
  refine
    (CnfClause.eval_eq_false_iff (C := clause‚ÇÄ) (x := xFalse)).2 ?_
  intro ‚Ñì h‚Ñì
  have h‚Ñì' : ‚Ñì = literal‚ÇÄ := by
    simpa [clause‚ÇÄ] using h‚Ñì
  subst h‚Ñì'
  simp [Literal.eval, literal‚ÇÄ, xFalse]

@[simp] lemma cnf‚ÇÄ_eval_true : cnf‚ÇÄ.eval xTrue = true := by
  classical
  refine (CNF.eval_eq_true_iff (F := cnf‚ÇÄ) (x := xTrue)).2 ?_
  intro C hC
  rcases List.mem_singleton.mp hC with rfl
  simpa using (CnfClause.eval_eq_true_iff (C := clause‚ÇÄ) (x := xTrue)).1 clause‚ÇÄ_eval_true

@[simp] lemma cnf‚ÇÄ_eval_false : cnf‚ÇÄ.eval xFalse = false := by
  classical
  refine (CNF.eval_eq_false_iff (F := cnf‚ÇÄ) (x := xFalse)).2 ?_
  refine ‚ü®clause‚ÇÄ, ?_, ?_‚ü©
  ¬∑ simp [cnf‚ÇÄ]
  ¬∑ simpa using clause‚ÇÄ_eval_false

/-- –ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: —Ñ–∏–∫—Å–∏—Ä—É–µ–º `x‚ÇÄ := true`, `x‚ÇÅ` –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–º. -/
private def restriction‚ÇÄ : Restriction 2 :=
  { mask := fun
      | ‚ü®0, _‚ü© => some true
      | ‚ü®1, _‚ü© => none }

/-- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É—é—â–∏–µ –≤—Ç–æ—Ä–æ–π –±–∏—Ç. -/
private def restriction‚ÇÄ_fix (b : Bool) : Restriction 2 :=
  { mask := fun
      | ‚ü®0, _‚ü© => some true
      | ‚ü®1, _‚ü© => some b }

/-- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —Ñ–∏–∫—Å–∏—Ä—É—é—â–µ–µ –æ–±–∞ –±–∏—Ç–∞. -/
private def restriction_all_fixed : Restriction 2 :=
  { mask := fun
      | ‚ü®0, _‚ü© => some true
      | ‚ü®1, _‚ü© => some false }

lemma restriction_all_fixed_freeCount :
    restriction_all_fixed.freeCount = 0 := by
  classical
  unfold Restriction.freeCount Restriction.freeIndicesList restriction_all_fixed
  decide

lemma restriction_all_fixed_constant :
    restriction_all_fixed.isConstantOn cnf‚ÇÄ.eval = true := by
  classical
  refine Restriction.isConstantOn_of_freeCount_eq_zero
    (œÅ := restriction_all_fixed) (f := cnf‚ÇÄ.eval) ?_
  simpa using restriction_all_fixed_freeCount

/-- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ç–æ—á–∫–æ–π `xTrue`. -/
lemma restriction‚ÇÄ_compatible_true :
    restriction‚ÇÄ.compatible xTrue = true := by
  classical
  have hover : restriction‚ÇÄ.override xTrue = xTrue := by
    funext i
    fin_cases i <;> simp [Restriction.override, restriction‚ÇÄ, xTrue, Fin.cases]
  exact
    (Restriction.compatible_iff_override_eq (œÅ := restriction‚ÇÄ) (x := xTrue)).2 hover

/-- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å `xFalse`. -/
lemma restriction‚ÇÄ_not_compatible_false :
    restriction‚ÇÄ.compatible xFalse = false := by
  classical
  have hover : restriction‚ÇÄ.override xFalse ‚â† xFalse := by
    intro h
    have hx := congrArg (fun f => f ‚ü®0, by decide‚ü©) h
    simpa [Restriction.override, restriction‚ÇÄ, xFalse, Fin.cases] using hx
  have hx : restriction‚ÇÄ.compatible xFalse = true ‚Üí False := by
    intro hcompat
    have :=
      (Restriction.compatible_iff_override_eq (œÅ := restriction‚ÇÄ) (x := xFalse)).1 hcompat
    exact hover this
  cases hbool : restriction‚ÇÄ.compatible xFalse
  ¬∑ simpa [hbool]
  ¬∑ exact (hx (by simpa [hbool])).elim

/-- –ü—Ä–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π —Ç–æ—á–∫–µ `restrict` –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏. -/
lemma restriction‚ÇÄ_preserves_eval :
    restriction‚ÇÄ.restrict cnf‚ÇÄ.eval xTrue = cnf‚ÇÄ.eval xTrue := by
  have h := restriction‚ÇÄ_compatible_true
  simpa using Restriction.restrict_agree_of_compatible restriction‚ÇÄ cnf‚ÇÄ.eval h

/-- –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è `restriction‚ÇÄ` —Ñ–æ—Ä–º—É–ª–∞ `cnf‚ÇÄ` —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π. -/
lemma restriction‚ÇÄ_constant :
    restriction‚ÇÄ.isConstantOn cnf‚ÇÄ.eval = true := by
  classical
  have htrue : ‚àÄ x : Core.BitVec 2,
      restriction‚ÇÄ.restrict cnf‚ÇÄ.eval x = true := by
    intro x
    simp [Restriction.restrict, cnf‚ÇÄ, CNF.eval, clause‚ÇÄ, CnfClause.eval,
      Literal.eval, restriction‚ÇÄ, Restriction.override, literal‚ÇÄ]
  have hprop : ‚àÄ x y : Core.BitVec 2,
      restriction‚ÇÄ.restrict cnf‚ÇÄ.eval x = restriction‚ÇÄ.restrict cnf‚ÇÄ.eval y := by
    intro x y
    have hx := htrue x
    have hy := htrue y
    simpa [hx, hy]
  simpa [Restriction.isConstantOn, hprop]

/-- –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, PDT –≥–ª—É–±–∏–Ω—ã –Ω–æ–ª—å —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω. -/
lemma restriction‚ÇÄ_depth_zero :
    Restriction.hasDecisionTreeOfDepth restriction‚ÇÄ cnf‚ÇÄ.eval 0 = true := by
  classical
  -- –ü–æ –ª–µ–º–º–µ `hasDecisionTreeOfDepth_zero` –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ—Å—Ç—å.
  simpa using
    (restriction‚ÇÄ_constant : restriction‚ÇÄ.isConstantOn cnf‚ÇÄ.eval = true)

/-- –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å `x‚ÇÄ := false` –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É —Å –º–∞—Å–∫–æ–π. -/
@[simp] lemma restriction‚ÇÄ_assign_index0_false :
    restriction‚ÇÄ.assign ‚ü®0, by decide‚ü© false = (none : Option (Restriction 2)) := by
  classical
  simp [Restriction.assign, restriction‚ÇÄ, Core.Subcube.assign]

/-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª—É–±–∏–Ω—ã –æ–¥–∏–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. -/
def checkAllRestrictionsDepthOne : Bool :=
  ((Restriction.enumerate 2).map
      (fun œÅ => Restriction.hasDecisionTreeOfDepth œÅ cnf‚ÇÄ.eval 1)).all
    (fun b => b)

-- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º, —á—Ç–æ —Å—É–º–º–∞—Ä–Ω–∞—è –º–∞—Å—Å–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è `ùì°_p` –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–Ω–∞ 1.
#eval Restriction.totalWeight 2 (1 / 2 : Rat)

#eval checkAllRestrictionsDepthOne

#eval
  (((Restriction.enumerate 2).filter
        (fun œÅ => œÅ.mask 0 = none)).map
      (fun œÅ => œÅ.weight (1 / 2 : Rat))).sum

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π –ª–µ–º–º—ã: —Å–≤–æ–±–æ–¥–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ `1` –≤ —Ç—Ä—ë—Ö–º–µ—Ä–Ω–æ–º —Å–ª—É—á–∞–µ –¥–∞—ë—Ç —Ç—É –∂–µ –º–∞—Å—Å—É.
#eval
  (((Restriction.enumerate 3).filter
        (fun œÅ => œÅ.mask ‚ü®1, by decide‚ü© = none)).map
      (fun œÅ => œÅ.weight (1 / 2 : Rat))).sum

#eval (1 / 2 : Rat) * Restriction.totalWeight 2 (1 / 2 : Rat)

-- –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∞ –ø—Ä–∏ `t = 0` –∏ `p = 1/2`.
#eval CNF.failureProbability cnf‚ÇÄ (1 / 2 : Rat) 0

/-- –£—Ç–æ—á–Ω—è–µ–º: —Ñ–æ—Ä–º—É–ª–∞ –∏–∑ –ª–µ–º–º—ã `failureProbability_eq_failureSet_sum` —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä—è–º—ã–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º. -/
lemma cnf‚ÇÄ_failureProbability_eq_failureSet_sum :
    CNF.failureProbability cnf‚ÇÄ (1 / 2 : Rat) 0 =
      ((cnf‚ÇÄ.failureSet 0).map fun œÅ => œÅ.weight (1 / 2 : Rat)).sum := by
  simpa using
    (CNF.failureProbability_eq_failureSet_sum
      (F := cnf‚ÇÄ) (p := (1 / 2 : Rat)) (t := 0))

/-- –ò–ª–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 1. -/
lemma cnf‚ÇÄ_failureProbability_le_one :
    CNF.failureProbability cnf‚ÇÄ (1 / 2 : Rat) 0 ‚â§ 1 := by
  have hp‚ÇÄ : 0 ‚â§ (1 / 2 : Rat) := by norm_num
  have hp‚ÇÅ : (1 / 2 : Rat) ‚â§ 1 := by norm_num
  simpa using
    (CNF.failureProbability_le_one (F := cnf‚ÇÄ) (p := (1 / 2 : Rat))
      (t := 0) hp‚ÇÄ hp‚ÇÅ)

/-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∏–∂–µ –Ω—É–ª—è. -/
lemma cnf‚ÇÄ_failureProbability_nonneg :
    0 ‚â§ CNF.failureProbability cnf‚ÇÄ (1 / 2 : Rat) 0 := by
  have hp‚ÇÄ : 0 ‚â§ (1 / 2 : Rat) := by norm_num
  have hp‚ÇÅ : (1 / 2 : Rat) ‚â§ 1 := by norm_num
  simpa using
    (CNF.failureProbability_nonneg (F := cnf‚ÇÄ) (p := (1 / 2 : Rat))
      (t := 0) hp‚ÇÄ hp‚ÇÅ)

/-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—É —Å—É–º–º—ã –≤–µ—Å–æ–≤ –ø—Ä–∏ `choice = none`. -/
lemma sum_weights_mask_none_zero_example :
    (((Restriction.enumerate 1).filter
        (fun œÅ => œÅ.mask 0 = none)).map (fun œÅ => œÅ.weight (1 / 3 : Rat))).sum
      = (1 / 3 : Rat) := by
  simpa using
    (Restriction.sum_weights_mask_none_zero (n := 0) (p := (1 / 3 : Rat)))

end Pnp3.Tests
