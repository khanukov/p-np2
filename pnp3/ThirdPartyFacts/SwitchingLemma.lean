import Mathlib.Data.List.Basic
import Mathlib.Data.Finset.Card
import Mathlib.Algebra.BigOperators.Ring
import Core.BooleanBasics
import AC0.Formulas
import ThirdPartyFacts.BaseSwitching

/-!
  # Switching Lemma (H√•stad, Servedio-Tan)

  –§–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π switching lemma –∏ –µ—ë –º–Ω–æ–≥–æ—Ñ–æ—Ä–º—É–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.

  ## –°—Ç—Ä—É–∫—Ç—É—Ä–∞:

  1. **–°—Ç–∞—Ç—É—Å—ã –∫–ª–∞—É–∑** (isPending, isCollapsed, isFalsified)
  2. **–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π DT** –¥–ª—è DNF –ø—Ä–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
  3. **Barcode** (—à—Ç—Ä–∏—Ö-–∫–æ–¥) –¥–ª—è –∏–Ω—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è "–ø–ª–æ—Ö–∏—Ö" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  4. **Single switching** : Pr[DT(F|œÅ) ‚â• t] ‚â§ (16pk)^t
  5. **Multi-switching** : Pr[PDT_‚Ñì(ùìï|œÅ) ‚â• t] ‚â§ S^‚åàt/‚Ñì‚åâ ¬∑ (16pk)^t

  ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–∑ –ø–ª–∞–Ω–∞):

  - p = 1/(4k) –≥–¥–µ k - —à–∏—Ä–∏–Ω–∞ DNF
  - ‚Ñì = ‚åàlog‚ÇÇ(M+2)‚åâ - tail depth
  - t = 4‚Ñì¬∑(‚åàlog‚ÇÇS‚åâ + ‚åàlog‚ÇÇ((n+2)d)‚åâ) - trunk depth per round
  - C = 16 - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –•—ë—Å—Ç–∞–¥–∞
-/

namespace Pnp3
namespace ThirdPartyFacts
namespace SwitchingLemma

open Core
open AC0

variable {n : Nat}

section ClauseStatus

/-- –ö–ª–∞—É–∑–∞ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏—Ç–µ—Ä–∞–ª, –∏—Å—Ç–∏–Ω–Ω—ã–π –ø–æ–¥ œÅ. -/
def isCollapsed (C : CnfClause n) (œÅ : Restriction n) : Prop :=
  ‚àÉ lit ‚àà C.lits, Literal.holdsUnder lit œÅ.mask

/-- –ö–ª–∞—É–∑–∞ —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞: –≤—Å–µ –ª–∏—Ç–µ—Ä–∞–ª—ã –ª–æ–∂–Ω—ã –ø–æ–¥ œÅ (–±–µ–∑ –∑–≤—ë–∑–¥). -/
def isFalsified (C : CnfClause n) (œÅ : Restriction n) : Prop :=
  ‚àÄ lit ‚àà C.lits, ¬¨ Literal.holdsUnder lit œÅ.mask ‚àß
    (match lit with
     | Literal.pos i => œÅ.mask i ‚â† none
     | Literal.neg i => œÅ.mask i ‚â† none)

/-- –ö–ª–∞—É–∑–∞ pending (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏): –Ω–∏ –∫–æ–ª–ª–∞–ø—Å–∞, –Ω–∏ —Ñ–∞–ª—å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. -/
def isPending (C : CnfClause n) (œÅ : Restriction n) : Prop :=
  ¬¨ isCollapsed C œÅ ‚àß ¬¨ isFalsified C œÅ

/-- –î–ª—è DNF-—Ñ–æ—Ä–º—É–ª—ã: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤–∞—è pending –∫–ª–∞—É–∑–∞. -/
theorem firstPending_exists
    (F : DNF n) (œÅ : Restriction n) (t : Nat)
    (hdeep : canonicalDT F œÅ t) :  -- –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∏–∂–µ
    ‚àÉ C ‚àà F.terms, isPending C œÅ := by
  sorry  -- —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ PDT

/-- –ü–µ—Ä–≤–∞—è pending –∫–ª–∞—É–∑–∞ –Ω–µ —Ñ–∞–ª—å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ (–ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é). -/
theorem firstPending_not_falsified
    (C : CnfClause n) (œÅ : Restriction n)
    (h : isPending C œÅ) :
    ¬¨ isFalsified C œÅ := h.2

end ClauseStatus

section CanonicalDT

/--
  –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è DNF –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ œÅ.
  –≠—Ç–æ –ø—Ä–µ–¥–∏–∫–∞—Ç: "DT –∏–º–µ–µ—Ç –≥–ª—É–±–∏–Ω—É ‚â• t", –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
  –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–ø–ª–æ—Ö–∏—Ö" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

  TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∏–Ω–¥—É–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é Nat ‚Üí Bool
-/
def canonicalDT (F : DNF n) (œÅ : Restriction n) (t : Nat) : Prop :=
  sorry  -- placeholder: –Ω—É–∂–Ω–∞ —è–≤–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ DT

/-- –ì–ª—É–±–∏–Ω–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ DT –¥–ª—è –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—É–ª—ã —Ä–∞–≤–Ω–∞ 0. -/
@[simp] lemma canonicalDT_empty (œÅ : Restriction n) :
    canonicalDT (DNF.mk []) œÅ 0 := by
  sorry

/-- –ï—Å–ª–∏ —Ñ–æ—Ä–º—É–ª–∞ —É–∂–µ –∫–æ–ª–ª–∞–ø—Å–∏—Ä–æ–≤–∞–ª–∞, DT –∏–º–µ–µ—Ç –≥–ª—É–±–∏–Ω—É 0. -/
lemma canonicalDT_collapsed (F : DNF n) (œÅ : Restriction n)
    (hcoll : ‚àÉ C ‚àà F.terms, isCollapsed C œÅ) :
    ¬¨ canonicalDT F œÅ 1 := by
  sorry

end CanonicalDT

section Barcode

/--
  –®—Ç—Ä–∏—Ö-–∫–æ–¥ (barcode) –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è "–ø–ª–æ—Ö–æ–≥–æ" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.

  –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
  - `path` : –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å "–ø–æ–≤–æ—Ä–æ—Ç–æ–≤" –≤ DT (–±–∏—Ç—ã –ø—É—Ç–∏)
  - `angels` : –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
  - `length` : –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ (= t –¥–ª—è switching lemma)

  –ò–Ω–≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É –º–æ–∂–Ω–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ œÅ.
-/
structure Barcode where
  path : List Bool
  angels : List (Finset (Fin n))
  length : Nat
  valid : path.length = length ‚àß angels.length = length
  deriving Repr

/--
  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π failure-—Ç—Ä–∞—Å—Å—ã –¥–ª—è DNF –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ œÅ.
  –≠—Ç–æ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞:
  1. –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é pending –∫–ª–∞—É–∑—É
  2. –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Ç–µ—Ä–∞–ª, –¥–∞—é—â–∏–π –¥–ª–∏–Ω–Ω—É—é –≤–µ—Ç–≤—å
  3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å/–∑–Ω–∞–∫ –≤ –±–∞—Äcode
  4. –ü–æ–≤—Ç–æ—Ä—è–µ–º t —Ä–∞–∑
-/
noncomputable def canonicalFailureTrace
    (F : DNF n) (œÅ : Restriction n) (t : Nat)
    (hdeep : canonicalDT F œÅ t) : Barcode := by
  sorry  -- –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–µ—Ä–µ–∑ t —à–∞–≥–æ–≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏

/-- –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Üí –±–∞—Äcode. -/
noncomputable def encode
    (F : DNF n) (œÅ : Restriction n) (t : Nat)
    (hdeep : canonicalDT F œÅ t) : Barcode :=
  canonicalFailureTrace F œÅ t hdeep

/-- –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –±–∞—Äcode ‚Üí –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. -/
noncomputable def decode (F : DNF n) (bc : Barcode) : Restriction n := by
  sorry  -- –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ œÅ –∏–∑ path –∏ angels

/--
  –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: decode ‚àò encode = id.
  –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∏–Ω—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
-/
theorem decode_encode_id
    (F : DNF n) (œÅ : Restriction n) (t : Nat)
    (hdeep : canonicalDT F œÅ t) :
    decode F (encode F œÅ t hdeep) = œÅ := by
  sorry  -- –∏–Ω–¥—É–∫—Ü–∏—è –ø–æ —à–∞–≥–∞–º —Ç—Ä–∞—Å—Å—ã

end Barcode

section SingleSwitching

/--
  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–∞ (failure probability): —Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –≤—Å–µ—Ö "–ø–ª–æ—Ö–∏—Ö" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

  "–ü–ª–æ—Ö–æ–µ" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ = —Ç–∞–∫–æ–µ, —á—Ç–æ canonicalDT F œÅ t.
-/
noncomputable def failureProbability (F : DNF n) (p : Q) (t : Nat) : Q :=
  sorry  -- —Å—É–º–º–∞ weight p œÅ –ø–æ –≤—Å–µ–º œÅ —Å canonicalDT F œÅ t

/--
  **–¢–ï–û–†–ï–ú–ê: Single Switching Lemma**

  –î–ª—è k-DNF —Ñ–æ—Ä–º—É–ª—ã F, –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ p –∏ –≥–ª—É–±–∏–Ω—ã t:

    Pr[DT(F|œÅ) ‚â• t] ‚â§ (16 ¬∑ p ¬∑ k)^t

  –≥–¥–µ Pr –±–µ—Ä—ë—Ç—Å—è –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º œÅ ~ R_p.

  –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: —á–µ—Ä–µ–∑ –∏–Ω—ä–µ–∫—Ü–∏—é –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –±–∞—Äcodes —Ä–∞–∑–º–µ—Ä–∞
  O((2k)^t), –∏ –æ—Ü–µ–Ω–∫—É –≤–µ—Å–æ–≤ —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º (p / ((1-p)/2))^t.
-/
theorem single_switching_bound
    (F : DNF n) (k : Nat) (p : Q) (t : Nat)
    (hwidth : ‚àÄ C ‚àà F.terms, C.lits.length ‚â§ k)
    (hp : 0 < p) (hp1 : p < 1) :
    failureProbability F p t ‚â§ (16 * p * k : Q) ^ t := by
  sorry  -- –∏–Ω—ä–µ–∫—Ü–∏—è encode + –æ—Ü–µ–Ω–∫–∞ –≤–µ—Å–æ–≤

end SingleSwitching

section MultiSwitching

/-- –°–µ–º–µ–π—Å—Ç–≤–æ DNF —Ñ–æ—Ä–º—É–ª. -/
abbrev FamilyDNF (S n : Nat) := Fin S ‚Üí DNF n

/--
  –ü—Ä–µ–¥–∏–∫–∞—Ç: —Å–µ–º–µ–π—Å—Ç–≤–æ ùìï –ù–ï –∏–º–µ–µ—Ç –æ–±—â–µ–≥–æ PDT –≥–ª—É–±–∏–Ω—ã < t —Å —Ö–≤–æ—Å—Ç–∞–º–∏ ‚â§ ‚Ñì.

  –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–∏–Ω—ã ‚â• t –ø–æ—Å–ª–µ
  –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∏–∫—Å–∞—Ü–∏–π, –æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö ‚â§ ‚Ñì —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ö–≤–æ—Å—Ç–∞—Ö.
-/
def pdtDepth_ge (ùìï : FamilyDNF S n) (œÅ : Restriction n) (‚Ñì t : Nat) : Prop :=
  sorry  -- —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PartialDT witness

/--
  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–∞ –¥–ª—è —Å–µ–º–µ–π—Å—Ç–≤–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ‚Ñì.
-/
noncomputable def failureProbability_family
    (ùìï : FamilyDNF S n) (p : Q) (‚Ñì t : Nat) : Q :=
  sorry  -- —Å—É–º–º–∞ –≤–µ—Å–æ–≤ "–ø–ª–æ—Ö–∏—Ö" œÅ –¥–ª—è —Å–µ–º–µ–π—Å—Ç–≤–∞

/--
  **–¢–ï–û–†–ï–ú–ê: Multi-Switching Lemma**

  –î–ª—è —Å–µ–º–µ–π—Å—Ç–≤–∞ ùìï –∏–∑ S —Ñ–æ—Ä–º—É–ª, –∫–∞–∂–¥–∞—è - k-DNF:

    Pr[PDT_‚Ñì(ùìï|œÅ) ‚â• t] ‚â§ S^‚åàt/‚Ñì‚åâ ¬∑ (16 ¬∑ p ¬∑ k)^t

  –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: —Ä–∞—Å—à–∏—Ä—è–µ–º single switching —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–≤.
  –ó–∞ t/‚Ñì —à–∞–≥–æ–≤ –º–µ–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –Ω–µ –±–æ–ª–µ–µ ‚åàt/‚Ñì‚åâ —Ä–∞–∑, –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä S^‚åàt/‚Ñì‚åâ.
-/
theorem multi_switching_bound
    (ùìï : FamilyDNF S n) (k ‚Ñì t : Nat) (p : Q)
    (hwidth : ‚àÄ i, ‚àÄ C ‚àà (ùìï i).terms, C.lits.length ‚â§ k)
    (hp : 0 < p) (hp1 : p < 1) :
    failureProbability_family ùìï p ‚Ñì t
      ‚â§ (S : Q) ^ ((t + ‚Ñì - 1) / ‚Ñì) * (16 * p * k : Q) ^ t := by
  sorry  -- multi-barcode —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Ñ–æ—Ä–º—É–ª

end MultiSwitching

section ParameterInstantiation

/--
  –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è AC‚Å∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É:
  - p = 1/(4k)
  - ‚Ñì = ‚åàlog‚ÇÇ(M+2)‚åâ
  - t = 4‚Ñì¬∑(‚åàlog‚ÇÇS‚åâ + ‚åàlog‚ÇÇ((n+2)d)‚åâ)

  –ü—Ä–∏ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–∞ ‚â§ 1/((n+2)d).
-/
def ac0_parameters (M k S n d : Nat) : (Q √ó Nat √ó Nat) :=
  let p := (1 : Q) / (4 * k)
  let ‚Ñì := Nat.log2 (M + 2) + 1  -- ceiling approximation
  let t := 4 * ‚Ñì * (Nat.log2 S + 1 + Nat.log2 ((n + 2) * d) + 1)
  (p, ‚Ñì, t)

/--
  –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª–∞.
-/
theorem ac0_parameters_success_prob
    (M k S n d : Nat)
    (hM : 0 < M) (hk : 0 < k) (hS : 0 < S) (hn : 0 < n) (hd : 0 < d) :
    let (p, ‚Ñì, t) := ac0_parameters M k S n d
    (S : Q) ^ ((t + ‚Ñì - 1) / ‚Ñì) * (16 * p * k : Q) ^ t
      ‚â§ (1 : Q) / ((n + 2) * d) := by
  sorry  -- –ø—Ä—è–º–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å log –æ—Ü–µ–Ω–∫–∞–º–∏

end ParameterInstantiation

end SwitchingLemma
end ThirdPartyFacts
end Pnp3
